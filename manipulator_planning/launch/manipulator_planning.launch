<?xml version="1.0"?>
<launch>

	
	<!-- Load parameters --> 
	<rosparam file="$(find manipulator_planning)/config/manipulator_planning.yaml" command="load" />

	<!-- Load controllers and hardware interface -->
	<include file="$(find manipulator_hw)/launch/manipulator_hw.launch" />

	<!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="model" default="$(find manipulator_description)/urdf/urdf_remade.urdf.xacro"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <!-- <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include> -->

	<!-- Load robot description --> 
	  <param name="robot_description" command="$(find xacro)/xacro
     $(find manipulator_description)/urdf/urdf_remade.urdf.xacro"/>
	<!-- <include file="$(find manipulator_description)/launch/load.launch" /> -->

	  <!-- <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
        args="-urdf -model robot -param robot_description" respawn="false" output="screen" /> -->

	<!-- Publish robot state (joints) as TF -->
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

	<!-- <node name="joint_state_publisher_gui" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" /> -->

	<!-- Joint State Publisher -->
	<!-- <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" /> -->

	<!-- Node for generating end-effector positions -->
	<include file="$(find manipulator_vision)/launch/manipulator_vision.launch" />

	<!-- Node for computing inverse kinematics -->
	<node name="manipulator_planning_node" pkg="manipulator_planning" type="manipulator_planning_node" output="screen"/>

	<!-- RViz -->
	<!-- <node name="rviz"  pkg="rviz" type="rviz" args="-d $(find manipulator_planning)/rviz/config.rviz" required="true" /> -->

	

</launch>
